#!/usr/bin/python
from __future__ import print_function
import argparse
import sys

from toollabs.webservice import WebService
from toollabs.webservice.backends import Backend, GridEngineBackend
from toollabs.webservice.services import webservice_classes
from toollabs.common.utils import wait_for
from toollabs.common import Tool
from toollabs.common.el import log_command_invocation


argparser = argparse.ArgumentParser()
argparser.add_argument('type', help='Type of webservice to start',
                       choices=webservice_classes.keys(), nargs='?')
argparser.add_argument('--backend', help='Which cluster backend to use run the webservice',
                       choices=['gridengine'],
                       default='gridengine')
argparser.add_argument('action', help='Action to perform',
                       choices=['start', 'stop', 'status', 'restart'])
argparser.add_argument('extra_args', help='Extra arguments to be parsed by the chosen webservicetype',
                       nargs='?')
# Backwards compat with older webservice. Allows for webservice --release precise lighttpd <action>
argparser.add_argument('--release',
                       help=argparse.SUPPRESS,
                       choices=['precise', 'trusty'])


def start(job, message):
    try:
        job.request_start()
    except WebService.InvalidWebServiceException as e:
        raise SystemExit(e.message)
    # FIXME: Treat pending state differently.
    wait_for(lambda: job.get_state() != Backend.STATE_RUNNING, message)


def stop(job, message):
    job.request_stop()
    wait_for(lambda: not job.get_state() == Backend.STATE_STOPPED, message)


if __name__ == '__main__':
    log_command_invocation('webservice', ' '.join(sys.argv))
    args = argparser.parse_args()

    tool = Tool.from_currentuser()
    if args.type is None:
        args.type = tool.manifest.get('web', 'lighttpd')

    # Backwards compatibility hack to support 'webservice --release precise lighttpd start' invocations
    if args.release is not None:
        if args.type == 'lighttpd':
            if args.release == 'precise':
                args.type = 'lighttpd-precise'
                print("--release=precise is deprecated. Use %s lighttpd-precise <action> instead" % sys.argv[0])
            elif args.release == 'trusty':
                print("--release=trusty is deprecated. Use %s %s <action> instead " % sys.argv[0], args.type)
        else:
            print("--release is deprecated and has no effect, using trusty...")
            args.release = 'trusty'

    webservice = webservice_classes[args.type](tool, args.extra_args)

    job = GridEngineBackend(webservice)

    if args.action == 'start':
        if job.get_state() != Backend.STATE_STOPPED:
            print('Your job is already running')
            sys.exit()

        start(job, 'Starting webservice')
        webservice.update_manifest('start')

    elif args.action == 'stop':
        if job.get_state() == Backend.STATE_STOPPED:
            print('Your webservice is not running')
            sys.exit()

        stop(job, 'Stopping webservice')
        webservice.update_manifest('stop')

    elif args.action == 'restart':
        if job.get_state() != Backend.STATE_STOPPED:
            start(job, 'Your job is not running, starting')
        else:
            stop(job, 'Restarting webservice')
            start(job, '')
        tool.save_manifest()
    elif args.action == 'status':
        if job.get_state() != Backend.STATE_STOPPED:
            print('Your webservice is running', end='')
        else:
            print('Your webservice is not running', end='')
    print()  # End program with newline, don't output newline anywhere else :)
